*/

704. Binary Search


Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.
You must write an algorithm with O(log n) runtime complexity.


Example 1:
Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4



Example 2:
Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1




Constraints:
1 <= nums.length <= 104
-104 < nums[i], target < 104
All the integers in nums are unique.
nums is sorted in ascending order.


*/


class Solution {
    public int search(int[] nums, int target) {

        if(nums.length == 0) {
            return -1;
        }

        if(nums.length == 1) {
            return (nums[0] != target ? -1 : 0);
        }

        return binary_search(nums, 0, nums.length-1, target);    
    }

    public int binary_search(int[] nums, int startIndex, int lastIndex, int target) {
        
        if(startIndex > lastIndex) {
            return -1;
        }

        int midIndex = startIndex + (lastIndex-startIndex)/2;
        System.out.printf("startIndex : %d, lastIndex : %d, midIndex : %d\n", startIndex, lastIndex, midIndex);
        System.out.printf("midValue : %d, target : %d\n", nums[midIndex], target);

        if(nums[midIndex] == target) {
            return midIndex;
        } else if(nums[midIndex] < target) {            
            return binary_search(nums, midIndex+1, lastIndex, target);
        } else {            
            return binary_search(nums, startIndex, midIndex-1, target);
        }        
    }
}
