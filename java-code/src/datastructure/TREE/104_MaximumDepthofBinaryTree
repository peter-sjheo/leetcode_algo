//104. Maximum Depth of Binary Tree

/*

Given the root of a binary tree, return its maximum depth.
A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.


Input: root = [3,9,20,null,null,15,7]
Output: 3

Input: root = [1,null,2]
Output: 2

*/



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {      
        if(root == null) {
            return 0;
        }
        
        int depth = travelTree(root, 1);        
        return depth;
    }

    public int travelTree(TreeNode root, int depth) {
        
        if(root == null) {
            return depth;
        }

        if(root.left == null && root.right == null) {
            return depth;
        }        
        
        int left_depth  = travelTree(root.left,  depth+1);                        
        int right_depth = travelTree(root.right, depth+1);

        return (left_depth > right_depth) ? left_depth : right_depth;        
    }
}
