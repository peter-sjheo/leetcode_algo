/*
98. Validate Binary Search Tree

Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left 
subtree
 of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.



Input: root = [2,1,3]
Output: true

Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        boolean result = travel(root, Long.MIN_VALUE, Long.MAX_VALUE);    
        return result;
    }

    public boolean travel(TreeNode node, long min_value, long max_value) {

        if(node == null) {
            return true;
        }

        if(node.val < min_value) { 
            System.out.printf("node.val(%d) < min_value(%d)\n", node.val, min_value);
            return false;
        }

        if(node.val == min_value) { 
            System.out.printf("node.val(%d) == min_value(%d)\n", node.val, min_value);
            return false;
        }

        if(node.val > max_value) {
            System.out.printf("node.val(%d) > max_value(%d)\n", node.val, max_value);
            return false;
        }

        if(node.val == max_value) {
            System.out.printf("node.val(%d) == max_value(%d)\n", node.val, max_value);
            return false;
        }

        boolean left_val  = travel(node.left,  min_value, node.val);
        boolean right_val = travel(node.right, node.val,  max_value);

        System.out.printf("left_val  : %b ,", left_val);
        System.out.printf("right_val : %b\n", right_val);

        if(left_val && right_val) {
            return true;
        } 

        return false;
    }
}
